plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    //    maven { url = "https://minecraft.curseforge.com/api/maven/"}
//    maven { url = "https://dvs1.progwml6.com/files/maven/"}
    maven { url = "https://modmaven.dev"}
    maven { url = "https://www.cursemaven.com"}
//    maven { url 'https://maven.blamejared.com'}
//    maven { url "https://maven.shedaniel.me" }
//    maven { url = uri("https://maven.architectury.dev/") }
//    maven { url = uri("https://maven.blakesmods.com") }
    maven { url 'https://maven.theillusivec4.top/'}
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
//    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_version}"
//    implementation "dev.architectury:architectury-neoforge:${architectury_version}"
//    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") //Just Enough Items
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}") //Just Enough Items
    runtimeOnly("mezz.jei:jei-${minecraft_version}-common:${jei_version}") //Just Enough Items
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") //Just Enough Items
    compileOnly("curse.maven:just-enough-resources-jer-240630:${jer_id}") //Just Enough Resources
    runtimeOnly("curse.maven:just-enough-resources-jer-240630:${jer_id}") //Just Enough Resources
//    compileOnly("curse.maven:projecte-226410:${projecte_id}") //ProjectE
//    runtimeOnly("curse.maven:projecte-226410:${projecte_id}") //ProjectE
    compileOnly("vazkii.patchouli:Patchouli:1.21-${patchouli_version}-NEOFORGE-SNAPSHOT:api") //Patchouli
    runtimeOnly("vazkii.patchouli:Patchouli:1.21-${patchouli_version}-NEOFORGE-SNAPSHOT") //Patchouli
//    runtimeOnly("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bookshelf_version}") //Bookshelf
//    runtimeOnly("curse.maven:enchantment-descriptions-250419:${enchantment_descriptions_id}") //Enchantment Descriptions
    runtimeOnly("curse.maven:just-enough-effect-descriptions-jeed-532286:${jeed_id}") //Enchantment Descriptions
//    runtimeOnly("curse.maven:selene-499980:${selene_id}") //Moonlight Lib (For Target Dummy)
//    runtimeOnly("curse.maven:mmmmmmmmmmmm-225738:${mmm_id}") //MmmMmmMmmMmm (Target Dummy)
    runtimeOnly("curse.maven:jade-324717:${jade_id}") //Jade
//    compileOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api")
//    runtimeOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}")
//    implementation "com.blakebr0.cucumber:Cucumber:${minecraft_version}-6.2.0"
//    implementation "com.blakebr0.mysticalagriculture:MysticalAgriculture:${minecraft_version}-6.2.0"
//    implementation "com.blakebr0.mysticalcustomization:MysticalCustomization:${minecraft_version}-4.2.0"
    runtimeOnly("curse.maven:model-gap-fix-676136:${mgf_id}") // Model Gap Fix

}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "100000"
        }
    }
}