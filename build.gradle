plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.minecraftforge.net"}
//    maven { url = "https://minecraft.curseforge.com/api/maven/"}
//    maven { url = "https://dvs1.progwml6.com/files/maven/"}
    maven { url = "https://modmaven.dev"}
    maven { url = "https://www.cursemaven.com"}
//    maven { url 'https://maven.blamejared.com'}
//    maven { url "https://maven.shedaniel.me" }
//    maven { url = uri("https://maven.architectury.dev/") }
//    maven { url = uri("https://maven.blakesmods.com") }
    maven { url 'https://maven.theillusivec4.top/'}
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"
//    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_version}")
//    compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
//    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") //Just Enough Items
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}") //Just Enough Items
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common:${jei_version}") //Just Enough Items
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") //Just Enough Items
    compileOnly fg.deobf("curse.maven:just-enough-resources-jer-240630:${jer_id}") //Just Enough Resources
    runtimeOnly fg.deobf("curse.maven:just-enough-resources-jer-240630:${jer_id}") //Just Enough Resources
    compileOnly fg.deobf("curse.maven:projecte-226410:${projecte_id}") //ProjectE
    runtimeOnly fg.deobf("curse.maven:projecte-226410:${projecte_id}") //ProjectE
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FORGE-SNAPSHOT:api") //Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FORGE-SNAPSHOT") //Patchouli
//    runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bookshelf_version}") //Bookshelf
//    runtimeOnly fg.deobf("curse.maven:enchantment-descriptions-250419:${enchantment_descriptions_id}") //Enchantment Descriptions
    runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:${jeed_id}") //Enchantment Descriptions
    runtimeOnly fg.deobf("curse.maven:selene-499980:${selene_id}") //Moonlight Lib (For Target Dummy)
    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:${mmm_id}") //MmmMmmMmmMmm (Target Dummy)
//    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}") //Jade
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}"))
//    implementation fg.deobf('com.blakebr0.cucumber:Cucumber:${minecraft_version}-6.2.0')
//    implementation fg.deobf('com.blakebr0.mysticalagriculture:MysticalAgriculture:${minecraft_version}-6.2.0')
//    implementation fg.deobf('com.blakebr0.mysticalcustomization:MysticalCustomization:${minecraft_version}-4.2.0')
//    runtimeOnly fg.deobf("curse.maven:model-gap-fix-676136:4428800") // Model Gap Fix

}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : project.version, // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
